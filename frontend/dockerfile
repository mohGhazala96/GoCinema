FROM node:current-alpine

# RUN mkdir -p /usr/src/app
# WORKDIR /usr/src/app

# ENV PATH /usr/src/app/node_modules/.bin:$PATH

# RUN chown 1001:1001 -R /usr/local/lib/node_modules

# COPY package.json /usr/src/app/package.json



# # add app
# COPY . /usr/src/app
# RUN cd /usr/src/app
# RUN npm install
# RUN npm install @angular/cli

# # start app
# CMD forever start /usr/src/app/node_modules/@angular/cli/bin/ng serve \


#As seen on #https://medium.com/@avatsaev/create-efficient-angular-docker-images-with-multi-stage-builds-907e2be3008d
### STAGE 1: Build ###
# FROM node:alpine as builder
# COPY package.json package-lock.json ./
# ## Storing node modules on a separate layer will prevent unnecessary npm installs at each build
# RUN npm i && mkdir /ng-app && cp -R ./node_modules ./ng-app
# WORKDIR /ng-app
# COPY . .
# ## Build the angular app in production mode and store the artifacts in dist folder
# RUN $(npm bin)/ng build --prod

# # ### STAGE 2: Setup ###
# # FROM nginx:alpine
# # ## Copy our default nginx config
# # COPY nginx.conf /etc/nginx/conf.d/default.conf
# # ## Remove default nginx website
# # RUN rm -rf /usr/share/nginx/html/*
# # ## From ‘builder’ stage copy over the artifacts in dist folder to default nginx public folder
# # COPY --from=builder /ng-app/dist /usr/share/nginx/html

# # STEP 2 build a small nginx image with static website
# FROM nginx:alpine
# ## Remove default nginx website
# RUN rm -rf /usr/share/nginx/html/*

# COPY nginx.conf /etc/nginx/conf.d/default.conf

# ## From 'builder' copy website to default nginx public folder
# COPY --from=builder /app/dist /usr/share/nginx/html
# EXPOSE 80
# CMD ["nginx", "-g", "daemon off;"]

# Create a directory where our app will be placed
RUN mkdir -p /usr/src/app

# Change directory so that our commands run inside this new directory
WORKDIR /usr/src/app

# # Copy dependency definitions
# COPY package.json /usr/src/app

# # Install dependecies
# RUN npm install

# # Get all the code needed to run the app
# COPY . /usr/src/app

# Expose the port the app runs in
# EXPOSE 4200

# Serve the app
CMD ["npm", "start"]